apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: widgetario-local
  labels:
    kubernetes.courselabs.co: hackathon
spec:
  rules:
  - host: widgetario.local 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:  # Backend service for the ingress rule
          service: #  Service for the backend
            name: widgetario-web-internal # Name of the service
            port: 
              name: http # Port for the backend service
---
apiVersion: v1
kind: Service
metadata:
  name: widgetario-web-internal
  labels:
    kubernetes.courselabs.co: hackathon
    app: widgetario
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:  
    app: widgetario
    component: web # Selector for the pods managed by this service
  type: ClusterIP
---
apiVersion: v1
kind: Secret
metadata:
  name: web-api
  labels:
    kubernetes.courselabs.co: hackathon
type: Opaque
stringData: # Secret for the API configuration
  api.json: |-   # Configuration for the API
    {
      "Widgetario": {
        "ProductsApi": {
          "Url": "http://products-api.default.svc.cluster.local/products"
        },
        "StockApi": {
          "Url": "http://stock-api.default.svc.cluster.local/stock"
        }
      }
    }
    {
      "Widgetario": {
        "ProductsApi": {
          "Url": "http://products-api.default.svc.cluster.local/products"
        },
        "StockApi": {
          "Url": "http://stock-api.default.svc.cluster.local/stock"
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-features
  labels:
    kubernetes.courselabs.co: hackathon
data:
  Widgetario__Theme: dark # Theme for the application
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    kubernetes.courselabs.co: hackathon
    app: widgetario
spec:
  replicas: 3
  selector:
    matchLabels:
        app: widgetario
        component: web
  template:
    metadata:
      labels: 
        app: widgetario
        component: web
        hackathon: part-7
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: '5001'  # Port for Prometheus scraping
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 65534  # Non-root user ID
        runAsGroup: 3000  # Non-root group ID
      containers:
        - name: logger
          image: alpine:3.14
          command: ['sh', '-c', 'tail -f /logs-ro/app.log']  #  Command to tail the log file  
          volumeMounts:
            - name: logs
              mountPath: /logs-ro
              readOnly: true
        - name: app
          image: widgetario/web:21.03
          ports:
            - containerPort: 5001  # Port exposed by the web application
              name: http
          env:
            - name: ASPNETCORE_URLS
              value: http://+:5001  # URL for the web application
          envFrom:
            - configMapRef:
                name: web-features
          volumeMounts:
            - name: api-config
              mountPath: "/app/secrets"
              readOnly: true
            - name: logs
              mountPath: "/logs"
          readinessProbe:
            httpGet:
              path: /
              port: http
            periodSeconds: 5
            failureThreshold: 1
          livenessProbe:
            httpGet:  # Health check for the web application
              path: /
              port: http
            periodSeconds: 20
            initialDelaySeconds: 20
          resources:
            limits:
              cpu: 200m
              memory: 150Mi 
          securityContext:  # Security context for the container
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
      volumes:
        - name: api-config
          secret:
            secretName: web-api
        - name: logs
          emptyDir: {} # EmptyDir volume for logs